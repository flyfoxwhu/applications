package ${queryPackage};

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class ${className}${queryPrefix} {
    /**
     * order by clause.
     */
    protected String orderByClause;

    /**
     * distinct
     */
    protected boolean distinct;

    /**
     * criteria list
     */
    protected List<Criteria> oredCriteria;

    /**
     * page
     */
    protected Integer pageOffset;

    /**
     * page size
     */
    protected Integer pageSize;

    public ${className}${queryPrefix}() {
        oredCriteria = new ArrayList<Criteria>();
    }

    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    public String getOrderByClause() {
        return orderByClause;
    }

    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    public boolean isDistinct() {
        return distinct;
    }

    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    public boolean isValid() {
        for (int i = 0; i < oredCriteria.size(); i++) {
            if (oredCriteria.get(i).isValid()) {
                return true;
            }
        }
        return false;
    }

    public void setPageOffset(Integer pageOffset) {
        this.pageOffset = pageOffset;
    }

    public Integer getPageOffset() {
        return pageOffset;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    public Integer getPageSize() {
        return pageSize;
    }

    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }
        /**

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }


                public Criteria andGmtCreateIsNull() {
                    addCriterion("gmt_create is null");
                    return (Criteria) this;
                }

                public Criteria andGmtCreateIsNotNull() {
                    addCriterion("gmt_create is not null");
                    return (Criteria) this;
                }

                public Criteria andGmtCreateEqualTo(Date value) {
                    addCriterion("gmt_create =", value, "gmtCreate");
                    return (Criteria) this;
                }

                public Criteria andGmtCreateNotEqualTo(Date value) {
                    addCriterion("gmt_create <>", value, "gmtCreate");
                    return (Criteria) this;
                }

                public Criteria andGmtCreateGreaterThan(Date value) {
                    addCriterion("gmt_create >", value, "gmtCreate");
                    return (Criteria) this;
                }

                public Criteria andGmtCreateGreaterThanOrEqualTo(Date value) {
                    addCriterion("gmt_create >=", value, "gmtCreate");
                    return (Criteria) this;
                }

                public Criteria andGmtCreateLessThan(Date value) {
                    addCriterion("gmt_create <", value, "gmtCreate");
                    return (Criteria) this;
                }

                public Criteria andGmtCreateLessThanOrEqualTo(Date value) {
                    addCriterion("gmt_create <=", value, "gmtCreate");
                    return (Criteria) this;
                }

                public Criteria andGmtCreateIn(List<Date> values) {
                    addCriterion("gmt_create in", values, "gmtCreate");
                    return (Criteria) this;
                }

                public Criteria andGmtCreateNotIn(List<Date> values) {
                    addCriterion("gmt_create not in", values, "gmtCreate");
                    return (Criteria) this;
                }

                public Criteria andGmtCreateBetween(Date value1, Date value2) {
                    addCriterion("gmt_create between", value1, value2, "gmtCreate");
                    return (Criteria) this;
                }

                public Criteria andGmtCreateNotBetween(Date value1, Date value2) {
                    addCriterion("gmt_create not between", value1, value2, "gmtCreate");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedIsNull() {
                    addCriterion("gmt_modified is null");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedIsNotNull() {
                    addCriterion("gmt_modified is not null");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedEqualTo(Date value) {
                    addCriterion("gmt_modified =", value, "gmtModified");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedNotEqualTo(Date value) {
                    addCriterion("gmt_modified <>", value, "gmtModified");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedGreaterThan(Date value) {
                    addCriterion("gmt_modified >", value, "gmtModified");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedGreaterThanOrEqualTo(Date value) {
                    addCriterion("gmt_modified >=", value, "gmtModified");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedLessThan(Date value) {
                    addCriterion("gmt_modified <", value, "gmtModified");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedLessThanOrEqualTo(Date value) {
                    addCriterion("gmt_modified <=", value, "gmtModified");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedIn(List<Date> values) {
                    addCriterion("gmt_modified in", values, "gmtModified");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedNotIn(List<Date> values) {
                    addCriterion("gmt_modified not in", values, "gmtModified");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedBetween(Date value1, Date value2) {
                    addCriterion("gmt_modified between", value1, value2, "gmtModified");
                    return (Criteria) this;
                }

                public Criteria andGmtModifiedNotBetween(Date value1, Date value2) {
                    addCriterion("gmt_modified not between", value1, value2, "gmtModified");
                    return (Criteria) this;
                }
                 **/

#foreach($item in $list)
#set($colName=$item.propName.substring(0, 1).toUpperCase() + $item.propName.substring(1))
        public Criteria and${colName}IsNull() {
            addCriterion("${item.columnName} is null");
            return (Criteria) this;
        }

        public Criteria and${colName}IsNotNull() {
            addCriterion("${item.columnName} is not null");
            return (Criteria) this;
        }

        public Criteria and${colName}EqualTo(${item.javaType} value) {
            addCriterion("${item.columnName} =", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}NotEqualTo(${item.javaType} value) {
            addCriterion("${item.columnName} <>", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}GreaterThan(${item.javaType} value) {
            addCriterion("${item.columnName} >", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}GreaterThanOrEqualTo(${item.javaType} value) {
            addCriterion("${item.columnName} >=", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}LessThan(${item.javaType} value) {
            addCriterion("${item.columnName} <", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}LessThanOrEqualTo(${item.javaType} value) {
            addCriterion("${item.columnName} <=", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}Like(${item.javaType} value) {
            addCriterion("${item.columnName} like", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}NotLike(${item.javaType} value) {
            addCriterion("${item.columnName} not like", value, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}In(List<${item.javaType}> values) {
            addCriterion("${item.columnName} in", values, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}NotIn(List<${item.javaType}> values) {
            addCriterion("${item.columnName} not in", values, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}Between(${item.javaType} value1, ${item.javaType} value2) {
            addCriterion("${item.columnName} between", value1, value2, "${item.propName}");
            return (Criteria) this;
        }

        public Criteria and${colName}NotBetween(${item.javaType} value1, ${item.javaType} value2) {
            addCriterion("${item.columnName} not between", value1, value2, "${item.propName}");
            return (Criteria) this;
        }

#end
    }

    /**
     * This class corresponds to the database table ${tableName}
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class corresponds to the database table ${tableName}
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}